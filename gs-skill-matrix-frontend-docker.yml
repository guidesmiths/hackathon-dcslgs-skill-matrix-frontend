# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

pr:
- master

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'c9bfe457-197d-4dff-8c99-a0468715e674'
  imageRepository: '$(Build.Repository.Name)'
  containerRegistry: 'dcslgsdevinternal.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build and push stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build an image
      inputs:
        command: build
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        buildContext: "**"
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          latest
    # - bash: |
    #       ERROR_UP=$((docker-compose --file ./docker/cicd/docker-compose.yml up --force -d --build) 2>&1)
    #       sleep 10
    #       docker exec gs-skill-matrix-backend sh -c "npm run test:report" 2>&1
    #       docker cp gs-skill-matrix-backend:/usr/src/app/test-reports/junit.xml ./
    #       docker cp gs-skill-matrix-backend:/usr/src/app/test-reports/coverage/lcov.info ./lcov.info
    #       sed -i 's|SF:/usr/src/app/|SF:|g' lcov.info

    #       echo "docker compose down"
    #       ERROR_DOWN=$((docker-compose --file ./docker/cicd/docker-compose.yml down) 2>&1)

    #       echo "ERROR_UP=$ERROR_UP"
    #       echo "ERROR_DOWN=$ERROR_DOWN"
    #   failOnStderr: true
    #   displayName: 'test: execute'
    # - task: PublishTestResults@2
    #   displayName: 'test: publish report'
    #   inputs:
    #     testResultsFormat: 'JUnit'
    #     testResultsFiles: '**/junit.xml'
    #     failTaskOnFailedTests: true
    - task: Docker@2
      displayName: Push an image to container registry
      inputs:
        command: push
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        buildContext: "**"
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          latest