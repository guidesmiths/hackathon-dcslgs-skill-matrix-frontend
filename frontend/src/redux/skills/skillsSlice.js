import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import fetchCount from './skillsAPI';

const initialState = {
  value: [],
  status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const incrementAsync = createAsyncThunk(
  'skills/fetchCount',
  async amount => {
    const response = await fetchCount(amount);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  },
);

export const skillsSlice = createSlice({
  name: 'skills',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    skillAdded(state, action) {
      state.push(action.payload);
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: builder => {
    builder
      .addCase(incrementAsync.pending, state => {
        state.status = 'loading';
      })
      .addCase(incrementAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.value += action.payload;
      });
  },
});

export const { skillAdded, incrementByAmount } = skillsSlice.actions;

// Selectors
export const selectSkill = state => state.skills.value;

export const selectAllSkills = state => state.skills;

export const selectSkillById = (state, skillId) =>
  state.skills.find(skill => skill.id === skillId);

export const selectSkillByName = (state, skillName) =>
  state.skills.find(skill => skill.Name === skillName);

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd = amount => (dispatch, getState) => {
//   const currentValue = selectCount(getState());
//   if (currentValue % 2 === 1) {
//     dispatch(incrementByAmount(amount));
//   }
// };

export default skillsSlice.reducer;
